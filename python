import pandas as pd
import numpy as np
from flask import Flask

# Initialisation de Flask
app = Flask(__name__)

# Fonction pour simuler la logique de trading
def trading_strategy():
    symbol = "EURUSD"
    timeframe = "5 minutes"  # Exemple de période

    # Données fictives (normalement récupérées depuis MT5)
    data = {
        'time': pd.date_range("2025-02-08", periods=100, freq="T"),
        'close': np.random.rand(100) * 1.5 + 1.05,  # Prix fictifs
    }
    df = pd.DataFrame(data)

    # Calculer la moyenne mobile 200
    df['MA200'] = df['close'].rolling(window=200).mean()

    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    df['RSI'] = rsi

    # Simuler un signal de trading
    last_price = df['close'].iloc[-1]
    last_rsi = df['RSI'].iloc[-1]
    ma200 = df['MA200'].iloc[-1]

    if last_price > ma200 and 50 <= last_rsi <= 60:
        return "Signal d'achat détecté"

    elif last_price < ma200 and 45 <= last_rsi <= 49:
        return "Signal de vente détecté"
    return "Pas de signal"

# Route Flask pour démarrer le bot
@app.route('/start', methods=['GET'])
def start_bot():
    # Ici on simule l'exécution de la stratégie
    signal = trading_strategy()
    return f"{signal} sur EURUSD", 200

# Route pour arrêter le bot (optionnel)
@app.route('/stop', methods=['GET'])
def stop_bot():
    return "Bot arrêté", 200

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
